
StepperMotor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000d4  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000128  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000158  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006c0  00000000  00000000  000001bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b1  00000000  00000000  0000087c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00000e2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000010a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000036c  00000000  00000000  000010d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d8  00000000  00000000  00001444  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  0000151c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  64:	0c 94 68 00 	jmp	0xd0	; 0xd0 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <stepper>:

void stepper(){
               //All pins of PORTC as output                //Initially all pins as output high
	  while(1)
	  {
		    PORTA = 0b00010010;
  6c:	82 e1       	ldi	r24, 0x12	; 18
  6e:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  70:	2f ef       	ldi	r18, 0xFF	; 255
  72:	80 e7       	ldi	r24, 0x70	; 112
  74:	92 e0       	ldi	r25, 0x02	; 2
  76:	21 50       	subi	r18, 0x01	; 1
  78:	80 40       	sbci	r24, 0x00	; 0
  7a:	90 40       	sbci	r25, 0x00	; 0
  7c:	e1 f7       	brne	.-8      	; 0x76 <stepper+0xa>
  7e:	00 c0       	rjmp	.+0      	; 0x80 <stepper+0x14>
  80:	00 00       	nop
		    _delay_ms(100);
		    PORTA = 0b00000110;
  82:	86 e0       	ldi	r24, 0x06	; 6
  84:	8b bb       	out	0x1b, r24	; 27
  86:	2f ef       	ldi	r18, 0xFF	; 255
  88:	80 e7       	ldi	r24, 0x70	; 112
  8a:	92 e0       	ldi	r25, 0x02	; 2
  8c:	21 50       	subi	r18, 0x01	; 1
  8e:	80 40       	sbci	r24, 0x00	; 0
  90:	90 40       	sbci	r25, 0x00	; 0
  92:	e1 f7       	brne	.-8      	; 0x8c <stepper+0x20>
  94:	00 c0       	rjmp	.+0      	; 0x96 <stepper+0x2a>
  96:	00 00       	nop
		    _delay_ms(100);
		    PORTA = 0b00001100;
  98:	8c e0       	ldi	r24, 0x0C	; 12
  9a:	8b bb       	out	0x1b, r24	; 27
  9c:	2f ef       	ldi	r18, 0xFF	; 255
  9e:	80 e7       	ldi	r24, 0x70	; 112
  a0:	92 e0       	ldi	r25, 0x02	; 2
  a2:	21 50       	subi	r18, 0x01	; 1
  a4:	80 40       	sbci	r24, 0x00	; 0
  a6:	90 40       	sbci	r25, 0x00	; 0
  a8:	e1 f7       	brne	.-8      	; 0xa2 <stepper+0x36>
  aa:	00 c0       	rjmp	.+0      	; 0xac <stepper+0x40>
  ac:	00 00       	nop
		    _delay_ms(100);
		    PORTA = 0b00011000;
  ae:	88 e1       	ldi	r24, 0x18	; 24
  b0:	8b bb       	out	0x1b, r24	; 27
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	80 e7       	ldi	r24, 0x70	; 112
  b6:	92 e0       	ldi	r25, 0x02	; 2
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <stepper+0x4c>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <stepper+0x56>
  c2:	00 00       	nop
  c4:	d3 cf       	rjmp	.-90     	; 0x6c <stepper>

000000c6 <main>:

void stepper();

int main(void)
{
	DDRA = 0xFF;    
  c6:	8f ef       	ldi	r24, 0xFF	; 255
  c8:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0x00; 
  ca:	1b ba       	out	0x1b, r1	; 27

    /* Replace with your application code */
    stepper();
  cc:	0e 94 36 00 	call	0x6c	; 0x6c <stepper>

000000d0 <_exit>:
  d0:	f8 94       	cli

000000d2 <__stop_program>:
  d2:	ff cf       	rjmp	.-2      	; 0xd2 <__stop_program>
